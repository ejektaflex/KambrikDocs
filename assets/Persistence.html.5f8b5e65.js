import{r as s,o as n,c as a,b as e,a as t,F as o,d as i,e as p}from"./app.6a3fb329.js";const r={},l={id:"data-persistence",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#data-persistence","aria-hidden":"true"},"#",-1),u=i(" Data Persistence "),d=p('<p>Kambrik uses a simple type of data persistence to save data in different situations:</p><ul><li>On the server (Server Persistence)</li><li>In config files (Config Persistence)</li></ul><p>Unlike the persistence methods that many other libraries use, these simply read and write to files. Synchronization between the client and server is not done. Rather, this persistence API is simply meant for data storage.</p><h2 id="server-persistence" tabindex="-1"><a class="header-anchor" href="#server-persistence" aria-hidden="true">#</a> Server Persistence</h2><p>If our data is serializable, we can store it on the server by declaring a variable like so, passing in an identifier and a default value:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> serverData <span class="token operator">=</span> <span class="token function">ServerDataFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n<span class="token keyword">var</span> names<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token keyword">by</span> serverData<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;my_names&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Accessing it works just like any other variable</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">)</span>\nnames <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">&quot;James&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Joe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jack&quot;</span><span class="token punctuation">)</span>\nnames<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>This data is automatically saved when the server shuts down, and automatically loaded when the server starts up.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Server data persistence only works while the server is open! If you try to access data before the server has started, or after the server has stopped, using this feature will throw an error.</p><p>If you want to persist data and access it at any time, consider using <a href="#config-persistence">Config Persistence</a> instead.</p></div><h2 id="config-persistence" tabindex="-1"><a class="header-anchor" href="#config-persistence" aria-hidden="true">#</a> Config Persistence</h2><p>We can also automatically store data in config files. The process is generally quite similar:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> configData <span class="token operator">=</span> <span class="token function">ConfigDataFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n<span class="token keyword">var</span> faveNum <span class="token keyword">by</span> configData<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span>\n<span class="token comment">// ...</span>\nfaveNum <span class="token operator">=</span> <span class="token number">33</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Unlike Server Persistence, this data will be loaded as soon as it is requested. It will be saved:</p><ul><li>If the config is on a server, when the server shuts down.</li><li>If the config is on a client, when the client closes.</li></ul><h2 id="other-considerations" tabindex="-1"><a class="header-anchor" href="#other-considerations" aria-hidden="true">#</a> Other Considerations</h2><p>In order to load and save these pieces of data, they must be serializable with <code>KotlinX Serialization</code>. As such, if they are Vanilla classes, they must also be marked with contextual.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">var</span> locations<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token annotation builtin">@Contextual</span> BlockPos<span class="token operator">&gt;</span> <span class="token keyword">by</span> myConfigDatafile<span class="token punctuation">.</span><span class="token function">of</span> <span class="token punctuation">{</span>\n    <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',18);r.render=function(i,p){const r=s("Badge");return n(),a(o,null,[e("h1",l,[c,u,t(r,{text:"unstable",type:"warning"})]),d],64)};export{r as default};

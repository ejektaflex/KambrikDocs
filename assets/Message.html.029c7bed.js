import{r as n,o as s,c as a,b as e,a as t,w as o,F as p,d as c,e as l}from"./app.6a3fb329.js";const i={},u=e("h1",{id:"messages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#messages","aria-hidden":"true"},"#"),c(" Messages")],-1),r=c("The Message API is an abstraction over the "),k={href:"https://github.com/FabricMC/fabric/tree/1.17/fabric-networking-api-v1",target:"_blank",rel:"noopener noreferrer"},b=c("Fabric Networking API"),m=c(". It uses "),d={href:"https://github.com/Kotlin/kotlinx.serialization",target:"_blank",rel:"noopener noreferrer"},g=c("Kotlinx.Serialization"),f=c(" to send messages over the network, without needing to create a "),h=e("code",null,"NbtElement",-1),v=c(" or "),w=e("code",null,"PacketByteBuf",-1),y=c("."),x={class:"custom-container tip"},I=e("p",{class:"custom-container-title"},"TIP",-1),C=c("This page assumes you have basic knowledge of "),S={href:"https://github.com/Kotlin/kotlinx.serialization",target:"_blank",rel:"noopener noreferrer"},M=c("Kotlinx Serialization"),P=c("!"),z=l('<h2 id="message-basics" tabindex="-1"><a class="header-anchor" href="#message-basics" aria-hidden="true">#</a> Message Basics</h2><p>The Messages API allows us to send an object over the network, from the Client to the Server and vice-versa. To make a serializable object, it must have the <code>@Serializable</code> annotation and inherit from <code>ClientMsg</code> or <code>ServerMsg</code>.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">import</span> io<span class="token punctuation">.</span>ejekta<span class="token punctuation">.</span>kambrik<span class="token punctuation">.</span>api<span class="token punctuation">.</span>message<span class="token punctuation">.</span>ClientMsg\n\n<span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">TestMsg</span><span class="token punctuation">(</span><span class="token keyword">val</span> num<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ClientMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClientReceived</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> MsgContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Got num!: <span class="token interpolation variable">$num</span>&quot;</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Registration and usage of these messages is simple.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token comment">// Registration (one time, in onInitialize):</span>\nKambrik<span class="token punctuation">.</span>Messages<span class="token punctuation">.</span><span class="token function">registerClientMessage</span><span class="token punctuation">(</span>\n\tTestMsg<span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n\t<span class="token function">Identifier</span><span class="token punctuation">(</span><span class="token string">&quot;my_mod&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;test_msg&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// Usage:</span>\n<span class="token function">TestMsg</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToClient</span><span class="token punctuation">(</span>some_player<span class="token punctuation">)</span>\n<span class="token comment">// or</span>\n<span class="token function">TestMsg</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToClients</span><span class="token punctuation">(</span>some_players<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>NOTE: Every message class must have one and only one associated identifier.</p></div><h2 id="serialization" tabindex="-1"><a class="header-anchor" href="#serialization" aria-hidden="true">#</a> Serialization</h2><p>When creating a <code>ClientMsg</code>/<code>ServerMsg</code>, all class properties should be serializable. If they are not, they must be marked as <code>@Transient</code>.</p><h2 id="serializing-vanilla-classes" tabindex="-1"><a class="header-anchor" href="#serializing-vanilla-classes" aria-hidden="true">#</a> Serializing Vanilla Classes</h2><p>We can also serialize a limited selection of classes from Vanilla.</p><p>To do so, we mark the property/type with <code>@Contextual</code>:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">class</span> <span class="token function">TellServerHello</span><span class="token punctuation">(</span><span class="token keyword">val</span> pos<span class="token operator">:</span> <span class="token annotation builtin">@Contextual</span> BlockPos<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ServerMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onServerReceived</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> MsgContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello from <span class="token interpolation variable">$pos</span>!&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',12),T=c("A list of all contextual classes "),B={href:"https://github.com/ejektaflex/Kambrik/blob/master/src/main/java/io/ejekta/kambrik/api/serial/KambrikSerialApi.kt",target:"_blank",rel:"noopener noreferrer"},R=c("can be found here"),A=c("."),_=l('<h2 id="reference-serializers" tabindex="-1"><a class="header-anchor" href="#reference-serializers" aria-hidden="true">#</a> Reference Serializers</h2><p>We can also reference some values that would otherwise be unserializable, and pass the reference to the other side. For example, <code>Item</code> classes are not serializable, but we can pass a reference to an Item registry object in a message.</p><p>Sending reference serializers works exactly like before, with a <code>@Contextual</code> annotation. In this example we send the server a Bucket:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">class</span> <span class="token function">BanItem</span><span class="token punctuation">(</span><span class="token keyword">val</span> item<span class="token operator">:</span> <span class="token annotation builtin">@Contextual</span> Item<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ServerMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onServerReceived</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> MsgContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;We got passed a: <span class="token interpolation"><span class="token delimiter variable">${</span>item<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">asString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token delimiter variable">}</span></span>!&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//...</span>\n\n<span class="token function">BanItem</span><span class="token punctuation">(</span>Items<span class="token punctuation">.</span>BUCKET<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Obviously, this will cause incorrect behaviour if the bucket does not exist on the server side. Because of this, you should stick to using reference serializers only when you know the data exists on both sides.</p>',5),K=c("A list of all reference serializers "),q={href:"https://github.com/ejektaflex/Kambrik/blob/master/src/main/java/io/ejekta/kambrik/api/serial/KambrikSerialApi.kt",target:"_blank",rel:"noopener noreferrer"},j=c("can be found here"),N=c("."),E=l('<h2 id="usage-in-commands" tabindex="-1"><a class="header-anchor" href="#usage-in-commands" aria-hidden="true">#</a> Usage in Commands</h2><p><code>ClientMsg</code> classes also have a <code>sendToClients</code> method. We can send this message to whichever players we&#39;d like! The Fabric Networking API has a helper class for this called <code>PlayerLookup</code>. The following example shows a message being sent to all players that are &#39;tracking&#39; (within view distance of) the world origin.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">class</span> PurgeArea <span class="token operator">:</span> <span class="token function">ClientMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClientReceived</span><span class="token punctuation">(</span>ctx<span class="token operator">:</span> MsgContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\tctx<span class="token punctuation">.</span>client<span class="token punctuation">.</span>player<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// later on, in a Command DSL:</span>\n<span class="token string">&quot;purge&quot;</span> runs <span class="token punctuation">{</span>\n\n\t<span class="token function">PurgeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendToClients</span><span class="token punctuation">(</span>\n\t\tPlayerLookup<span class="token punctuation">.</span><span class="token function">tracking</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>source<span class="token punctuation">.</span>world<span class="token punctuation">,</span> BlockPos<span class="token punctuation">.</span>ORIGIN<span class="token punctuation">)</span>\n\t<span class="token punctuation">)</span>\n\n\t<span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><p>This example shows how the Messages API could save us a lot of code:</p>',5),G=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token comment"},"// Message Definition"),c("\n"),e("span",{class:"token annotation builtin"},"@Serializable"),c("\n"),e("span",{class:"token keyword"},"class"),c(),e("span",{class:"token function"},"PlaceItemAtPosition"),e("span",{class:"token punctuation"},"("),c("\n    "),e("span",{class:"token keyword"},"val"),c(" item"),e("span",{class:"token operator"},":"),c(),e("span",{class:"token annotation builtin"},"@Contextual"),c(" Item"),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token keyword"},"val"),c(" amount"),e("span",{class:"token operator"},":"),c(" Int"),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token keyword"},"val"),c(" pos"),e("span",{class:"token operator"},":"),c(),e("span",{class:"token annotation builtin"},"@Contextual"),c(" BlockPos\n"),e("span",{class:"token punctuation"},")"),c(),e("span",{class:"token operator"},":"),c(),e("span",{class:"token function"},"ServerMsg"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),c(),e("span",{class:"token punctuation"},"{"),c("\n    "),e("span",{class:"token keyword"},"override"),c(),e("span",{class:"token keyword"},"fun"),c(),e("span",{class:"token function"},"onServerReceived"),e("span",{class:"token punctuation"},"("),c("ctx"),e("span",{class:"token operator"},":"),c(" MsgContext"),e("span",{class:"token punctuation"},")"),c(),e("span",{class:"token punctuation"},"{"),c("\n        "),e("span",{class:"token comment"},"// do placement here"),c("\n    "),e("span",{class:"token punctuation"},"}"),c("\n"),e("span",{class:"token punctuation"},"}"),c("\n\n"),e("span",{class:"token comment"},"// Register Message"),c("\nKambrik"),e("span",{class:"token punctuation"},"."),c("Message"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"registerServerMessage"),e("span",{class:"token punctuation"},"("),c("\n\tPlaceItemAtPosition"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"serializer"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),c(" \n\t"),e("span",{class:"token function"},"Identifier"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"kambrik"'),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token string"},'"place_item"'),e("span",{class:"token punctuation"},")"),c("\n"),e("span",{class:"token punctuation"},")"),c("\n\n"),e("span",{class:"token comment"},"// Send Message"),c("\n"),e("span",{class:"token function"},"PlaceItemAtPosition"),e("span",{class:"token punctuation"},"("),c("Items"),e("span",{class:"token punctuation"},"."),c("BUCKET"),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),c(" BlockPos"),e("span",{class:"token punctuation"},"."),c("ORIGIN"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"sendToServer"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),c("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br")])],-1),F=e("div",{class:"language-kotlin ext-kt line-numbers-mode"},[e("pre",{class:"language-kotlin"},[e("code",null,[e("span",{class:"token comment"},"// Register packet"),c("\nClientPlayNetworking"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"registerGlobalReceiver"),e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Identifier"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"kambrik"'),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token string"},'"place_item"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),c(),e("span",{class:"token punctuation"},"{"),c(" \n\tclient"),e("span",{class:"token punctuation"},","),c(" handler"),e("span",{class:"token punctuation"},","),c(" buf"),e("span",{class:"token punctuation"},","),c(" responseSender "),e("span",{class:"token operator"},"->"),c("\n\t\t"),e("span",{class:"token keyword"},"val"),c(" itemStr "),e("span",{class:"token operator"},"="),c(" buf"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"readString"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),c("\n\t\t"),e("span",{class:"token keyword"},"val"),c(" item "),e("span",{class:"token operator"},"="),c(" Registry"),e("span",{class:"token punctuation"},"."),c("ITEM"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"get"),e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"Identifier"),e("span",{class:"token punctuation"},"("),c("itemStr"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),c("\n\t\t"),e("span",{class:"token keyword"},"val"),c(" amount "),e("span",{class:"token operator"},"="),c(" buf"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"readInt"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),c("\n\t\t"),e("span",{class:"token keyword"},"val"),c(" pos "),e("span",{class:"token operator"},"="),c(" buf"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"readBlockPos"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),c("\n\t\tclient"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"execute"),c(),e("span",{class:"token punctuation"},"{"),c("\n\t\t\t"),e("span",{class:"token comment"},"// do placement here"),c("\n\t\t"),e("span",{class:"token punctuation"},"}"),c("\n"),e("span",{class:"token punctuation"},"}"),c("\n\n"),e("span",{class:"token comment"},"// Create packet"),c("\n"),e("span",{class:"token keyword"},"fun"),c(),e("span",{class:"token function"},"createPlacementPacket"),e("span",{class:"token punctuation"},"("),c("item"),e("span",{class:"token operator"},":"),c(" Item"),e("span",{class:"token punctuation"},","),c(" amount"),e("span",{class:"token operator"},":"),c(" Int"),e("span",{class:"token punctuation"},","),c(" pos"),e("span",{class:"token operator"},":"),c(" BlockPos"),e("span",{class:"token punctuation"},")"),e("span",{class:"token operator"},":"),c(" PacketByteBuf "),e("span",{class:"token punctuation"},"{"),c("\n\t"),e("span",{class:"token keyword"},"return"),c(" PacketByteBufs"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"create"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"apply"),c(),e("span",{class:"token punctuation"},"{"),c("\n\t\t"),e("span",{class:"token function"},"writeString"),e("span",{class:"token punctuation"},"("),c("Registry"),e("span",{class:"token punctuation"},"."),c("ITEM"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"getId"),e("span",{class:"token punctuation"},"("),c("item"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"toString"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},")"),c("\n\t\t"),e("span",{class:"token function"},"writeInt"),e("span",{class:"token punctuation"},"("),c("amount"),e("span",{class:"token punctuation"},")"),c("\n\t\t"),e("span",{class:"token function"},"writeBlockPos"),e("span",{class:"token punctuation"},"("),c("pos"),e("span",{class:"token punctuation"},")"),c("\n\t"),e("span",{class:"token punctuation"},"}"),c("\n"),e("span",{class:"token punctuation"},"}"),c("\n\n"),e("span",{class:"token comment"},"// Send packet"),c("\nClientPlayNetworking"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"send"),e("span",{class:"token punctuation"},"("),c("\n\t"),e("span",{class:"token function"},"Identifier"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},'"kambrik"'),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token string"},'"place_item"'),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),c(" \n\t"),e("span",{class:"token function"},"createPlacementPacket"),e("span",{class:"token punctuation"},"("),c("Items"),e("span",{class:"token punctuation"},"."),c("BUCKET"),e("span",{class:"token punctuation"},","),c(),e("span",{class:"token number"},"3"),e("span",{class:"token punctuation"},","),c(" BlockPos"),e("span",{class:"token punctuation"},"."),c("ORIGIN"),e("span",{class:"token punctuation"},")"),c("\n"),e("span",{class:"token punctuation"},")"),c("\n")])]),e("div",{class:"line-numbers"},[e("span",{class:"line-number"},"1"),e("br"),e("span",{class:"line-number"},"2"),e("br"),e("span",{class:"line-number"},"3"),e("br"),e("span",{class:"line-number"},"4"),e("br"),e("span",{class:"line-number"},"5"),e("br"),e("span",{class:"line-number"},"6"),e("br"),e("span",{class:"line-number"},"7"),e("br"),e("span",{class:"line-number"},"8"),e("br"),e("span",{class:"line-number"},"9"),e("br"),e("span",{class:"line-number"},"10"),e("br"),e("span",{class:"line-number"},"11"),e("br"),e("span",{class:"line-number"},"12"),e("br"),e("span",{class:"line-number"},"13"),e("br"),e("span",{class:"line-number"},"14"),e("br"),e("span",{class:"line-number"},"15"),e("br"),e("span",{class:"line-number"},"16"),e("br"),e("span",{class:"line-number"},"17"),e("br"),e("span",{class:"line-number"},"18"),e("br"),e("span",{class:"line-number"},"19"),e("br"),e("span",{class:"line-number"},"20"),e("br"),e("span",{class:"line-number"},"21"),e("br"),e("span",{class:"line-number"},"22"),e("br"),e("span",{class:"line-number"},"23"),e("br"),e("span",{class:"line-number"},"24"),e("br"),e("span",{class:"line-number"},"25"),e("br"),e("span",{class:"line-number"},"26"),e("br")])],-1);i.render=function(c,l){const i=n("OutboundLink"),O=n("CodeGroupItem"),W=n("CodeGroup");return s(),a(p,null,[u,e("p",null,[r,e("a",k,[b,t(i)]),m,e("a",d,[g,t(i)]),f,h,v,w,y]),e("div",x,[I,e("p",null,[C,e("a",S,[M,t(i)]),P])]),z,e("p",null,[T,e("a",B,[R,t(i)]),A]),_,e("p",null,[K,e("a",q,[j,t(i)]),N]),E,t(W,null,{default:o((()=>[t(O,{title:"Kambrik"},{default:o((()=>[G])),_:1}),t(O,{title:"Vanilla/Fabric"},{default:o((()=>[F])),_:1})])),_:1})],64)};export{i as default};

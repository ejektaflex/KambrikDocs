import{r as n,o as s,c as a,a as t,w as e,F as o,e as l,b as p,d as c}from"./app.6a3fb329.js";const u={},i=l('<h1 id="text-dsl" tabindex="-1"><a class="header-anchor" href="#text-dsl" aria-hidden="true">#</a> Text DSL</h1><p>Creating many types of <code>MutableText</code> can be done more easily with Kambrik&#39;s Text DSL.</p><h2 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h2><p>Here are some (not all) ways of creating some simple <code>Text</code>:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> textA <span class="token operator">=</span> <span class="token function">textLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> textB <span class="token operator">=</span> <span class="token function">textTranslate</span><span class="token punctuation">(</span><span class="token string">&quot;my.translation.key&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">val</span> textC <span class="token operator">=</span> <span class="token function">textKeybind</span><span class="token punctuation">(</span><span class="token string">&quot;key.jump&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="siblings" tabindex="-1"><a class="header-anchor" href="#siblings" aria-hidden="true">#</a> Siblings</h2><p>Adding sibling texts can be done by nesting them inside of the main text, preceded by a unary <code>+</code> symbol.</p><p>In order to add a sibling text, put a <code>+</code> before your sibling!</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">textLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;, how are you?&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="shorthands" tabindex="-1"><a class="header-anchor" href="#shorthands" aria-hidden="true">#</a> Shorthands</h3><p>You can substitute <code>textLiteral</code> for a string inside a builder to make your text shorter.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> text <span class="token operator">=</span> <span class="token function">textLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;, how are you?&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="styles" tabindex="-1"><a class="header-anchor" href="#styles" aria-hidden="true">#</a> Styles</h2><p>Sibling texts inherit the style of their parent, unless they specify their own styles.</p><p>We can add Formatting with <code>format(...formattings)</code>.</p><p>We can use the <code>+</code> shorthand here, too.</p>',16),r=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token comment"},"// All of this text will be Gold colored and Italicized, "),c("\n"),p("span",{class:"token comment"},"// except for the player's name, which is Aqua colored."),c("\n"),p("span",{class:"token keyword"},"val"),c(" text "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"textLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Hello "'),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token function"},"format"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("GOLD"),p("span",{class:"token punctuation"},","),c(" Formatting"),p("span",{class:"token punctuation"},"."),c("ITALIC"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token function"},"addLiteral"),p("span",{class:"token punctuation"},"("),c("player"),p("span",{class:"token punctuation"},"."),c("displayName"),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n        "),p("span",{class:"token function"},"format"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n    "),p("span",{class:"token function"},"addLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'", how are you?"'),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br")])],-1),k=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token comment"},"// All of this text will be Gold colored and Italicized, "),c("\n"),p("span",{class:"token comment"},"// except for the player's name, which is Aqua colored."),c("\n"),p("span",{class:"token keyword"},"val"),c(" text "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Hello "'),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"formatted"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("GOLD"),p("span",{class:"token punctuation"},","),c(" Formatting"),p("span",{class:"token punctuation"},"."),c("ITALIC"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"append"),p("span",{class:"token punctuation"},"("),c("\n        "),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),c("player"),p("span",{class:"token punctuation"},"."),c("displayName"),p("span",{class:"token punctuation"},")"),c("\n            "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"formatted"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"append"),p("span",{class:"token punctuation"},"("),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'", how are you?"'),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br")])],-1),b=l('<p>We can also change some simple style properties without much effort:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> test <span class="token operator">=</span> <span class="token function">textLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;Hello &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">format</span><span class="token punctuation">(</span>Formatting<span class="token punctuation">.</span>GOLD<span class="token punctuation">)</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;Joe&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        color <span class="token operator">=</span> <span class="token number">0x55ff33</span>\n        bold <span class="token operator">=</span> <span class="token boolean">true</span>\n        italics <span class="token operator">=</span> <span class="token boolean">true</span>\n        strikeThrough <span class="token operator">=</span> <span class="token boolean">false</span>\n        obfuscated <span class="token operator">=</span> <span class="token boolean">false</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">addLiteral</span><span class="token punctuation">(</span><span class="token string">&quot;, how are you?&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="hover-events" tabindex="-1"><a class="header-anchor" href="#hover-events" aria-hidden="true">#</a> Hover Events</h2><p>We can add hover events by setting the <code>hoverEvent</code> property.</p>',4),d=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"textLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Look at this bucket!"'),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token function"},"format"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    hoverEvent "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"HoverEvent"),p("span",{class:"token punctuation"},"("),c("HoverEvent"),p("span",{class:"token punctuation"},"."),c("Action"),p("span",{class:"token punctuation"},"."),c("SHOW_ITEM"),p("span",{class:"token punctuation"},","),c(" HoverEvent"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"ItemStackContent"),p("span",{class:"token punctuation"},"("),c("\n        "),p("span",{class:"token function"},"ItemStack"),p("span",{class:"token punctuation"},"("),c("Items"),p("span",{class:"token punctuation"},"."),c("BUCKET"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br")])],-1),m=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Look at this bucket!"'),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"formatted"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"styled"),c(),p("span",{class:"token punctuation"},"{"),c(" \n        it"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"withHoverEvent"),p("span",{class:"token punctuation"},"("),c("\n            "),p("span",{class:"token function"},"HoverEvent"),p("span",{class:"token punctuation"},"("),c("HoverEvent"),p("span",{class:"token punctuation"},"."),c("Action"),p("span",{class:"token punctuation"},"."),c("SHOW_ITEM"),p("span",{class:"token punctuation"},","),c(" HoverEvent"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"ItemStackContent"),p("span",{class:"token punctuation"},"("),c("\n                "),p("span",{class:"token function"},"ItemStack"),p("span",{class:"token punctuation"},"("),c("Items"),p("span",{class:"token punctuation"},"."),c("BUCKET"),p("span",{class:"token punctuation"},")"),c("\n            "),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c("\n        "),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br")])],-1),h=p("h3",{id:"showing-itemstack-text-on-hover",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#showing-itemstack-text-on-hover","aria-hidden":"true"},"#"),c(" Showing ItemStack text on Hover")],-1),f=p("p",null,"We also have a shorthand for showing ItemStack tooltips when hovering over text, making the previous example even shorter:",-1),g=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"textLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Look at this bucket!"'),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    "),p("span",{class:"token function"},"format"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token function"},"onHoverShowItem"),p("span",{class:"token punctuation"},"("),c("\n        "),p("span",{class:"token function"},"ItemStack"),p("span",{class:"token punctuation"},"("),c("Items"),p("span",{class:"token punctuation"},"."),c("BUCKET"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},")"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br")])],-1),v=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Look at this bucket!"'),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"formatted"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("AQUA"),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"styled"),c(),p("span",{class:"token punctuation"},"{"),c(" \n        it"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"withHoverEvent"),p("span",{class:"token punctuation"},"("),c("\n            "),p("span",{class:"token function"},"HoverEvent"),p("span",{class:"token punctuation"},"("),c("HoverEvent"),p("span",{class:"token punctuation"},"."),c("Action"),p("span",{class:"token punctuation"},"."),c("SHOW_ITEM"),p("span",{class:"token punctuation"},","),c(" HoverEvent"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"ItemStackContent"),p("span",{class:"token punctuation"},"("),c("\n                "),p("span",{class:"token function"},"ItemStack"),p("span",{class:"token punctuation"},"("),c("Items"),p("span",{class:"token punctuation"},"."),c("BUCKET"),p("span",{class:"token punctuation"},")"),c("\n            "),p("span",{class:"token punctuation"},")"),p("span",{class:"token punctuation"},")"),c("\n        "),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br")])],-1),x=p("h3",{id:"showing-text-on-hover",tabindex:"-1"},[p("a",{class:"header-anchor",href:"#showing-text-on-hover","aria-hidden":"true"},"#"),c(" Showing Text on Hover")],-1),y=p("p",null,"Similarly, we can show Text when hovering over Text as well.",-1),w=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"textLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Hello World!"'),p("span",{class:"token punctuation"},")"),c(),p("span",{class:"token punctuation"},"{"),c("\n    onHoverShowText "),p("span",{class:"token punctuation"},"{"),c("\n        "),p("span",{class:"token function"},"format"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("ITALIC"),p("span",{class:"token punctuation"},")"),c("\n        "),p("span",{class:"token function"},"addLiteral"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"How are you?"'),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n"),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br")])],-1),L=p("div",{class:"language-kotlin ext-kt line-numbers-mode"},[p("pre",{class:"language-kotlin"},[p("code",null,[p("span",{class:"token keyword"},"val"),c(" test "),p("span",{class:"token operator"},"="),c(),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"Hello World!"'),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"styled"),c(),p("span",{class:"token punctuation"},"{"),c(" \n        it"),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"withHoverEvent"),p("span",{class:"token punctuation"},"("),c("\n            "),p("span",{class:"token function"},"HoverEvent"),p("span",{class:"token punctuation"},"("),c("\n                HoverEvent"),p("span",{class:"token punctuation"},"."),c("Action"),p("span",{class:"token punctuation"},"."),c("SHOW_TEXT"),p("span",{class:"token punctuation"},","),c("\n                "),p("span",{class:"token function"},"LiteralText"),p("span",{class:"token punctuation"},"("),p("span",{class:"token string"},'"How are you?"'),p("span",{class:"token punctuation"},")"),c("\n                    "),p("span",{class:"token punctuation"},"."),p("span",{class:"token function"},"formatted"),p("span",{class:"token punctuation"},"("),c("Formatting"),p("span",{class:"token punctuation"},"."),c("ITALIC"),p("span",{class:"token punctuation"},")"),c("\n            "),p("span",{class:"token punctuation"},")"),c("\n        "),p("span",{class:"token punctuation"},")"),c("\n    "),p("span",{class:"token punctuation"},"}"),c("\n")])]),p("div",{class:"line-numbers"},[p("span",{class:"line-number"},"1"),p("br"),p("span",{class:"line-number"},"2"),p("br"),p("span",{class:"line-number"},"3"),p("br"),p("span",{class:"line-number"},"4"),p("br"),p("span",{class:"line-number"},"5"),p("br"),p("span",{class:"line-number"},"6"),p("br"),p("span",{class:"line-number"},"7"),p("br"),p("span",{class:"line-number"},"8"),p("br"),p("span",{class:"line-number"},"9"),p("br"),p("span",{class:"line-number"},"10"),p("br")])],-1);u.render=function(l,p){const c=n("CodeGroupItem"),u=n("CodeGroup");return s(),a(o,null,[i,t(u,null,{default:e((()=>[t(c,{title:"Kambrik"},{default:e((()=>[r])),_:1}),t(c,{title:"Vanilla"},{default:e((()=>[k])),_:1})])),_:1}),b,t(u,null,{default:e((()=>[t(c,{title:"Kambrik"},{default:e((()=>[d])),_:1}),t(c,{title:"Vanilla"},{default:e((()=>[m])),_:1})])),_:1}),h,f,t(u,null,{default:e((()=>[t(c,{title:"Kambrik"},{default:e((()=>[g])),_:1}),t(c,{title:"Vanilla"},{default:e((()=>[v])),_:1})])),_:1}),x,y,t(u,null,{default:e((()=>[t(c,{title:"Kambrik"},{default:e((()=>[w])),_:1}),t(c,{title:"Vanilla"},{default:e((()=>[L])),_:1})])),_:1})],64)};export{u as default};

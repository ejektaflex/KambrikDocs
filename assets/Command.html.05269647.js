import{r as n,o as s,c as a,b as t,a as e,w as p,F as o,d as c,e as l}from"./app.6a3fb329.js";const u={},i=t("h1",{id:"command-dsl",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#command-dsl","aria-hidden":"true"},"#"),c(" Command DSL")],-1),r=c("Kambrik offers an alternative command DSL that exists on top of the existing command framework, "),k={href:"https://github.com/Mojang/brigadier",target:"_blank",rel:"noopener noreferrer"},b=c("Brigadier"),m=c(". This DSL allows us to more easily express and modify the command tree, while still using Kotlin language features."),d=l('<h2 id="command-basics" tabindex="-1"><a class="header-anchor" href="#command-basics" aria-hidden="true">#</a> Command Basics</h2><p>To start, we can add normal commands inside of a <code>CommandRegistrationCallback</code>.</p><p>A simple callback that adds a command might look like this:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onInitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t<span class="token comment">//... init code ...</span>\n\n\t<span class="token keyword">val</span> callback <span class="token operator">=</span> CommandRegistrationCallback <span class="token punctuation">{</span> dispatcher<span class="token punctuation">,</span> dedicated <span class="token operator">-&gt;</span>\n\t\tdispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token comment">// our command!</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\tCommandRegistrationCallback<span class="token punctuation">.</span>EVENT<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>This creates a simple command: <code>/test</code>. It does not do anything yet, but it will work in-game as expected.</p><h3 id="execution" tabindex="-1"><a class="header-anchor" href="#execution" aria-hidden="true">#</a> Execution</h3><p>In order to get this command to run some code, we can add <code>runs</code>.</p>',7),g=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addCommand"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t"),t("span",{class:"token keyword"},"this"),c(" runs "),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Hello, World!"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token number"},"1"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n\n\t"),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"apple"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token keyword"},"this"),c(" runs "),t("span",{class:"token punctuation"},"{"),c("\n\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Apples."'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t"),t("span",{class:"token number"},"1"),c("\n\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n\n\t"),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"pear"'),t("span",{class:"token punctuation"},")"),c(" runs "),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Pears."'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token number"},"1"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br")])],-1),f=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"register"),t("span",{class:"token punctuation"},"("),c("\n\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"executes"),c(),t("span",{class:"token punctuation"},"{"),c(" \n\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Hello, World!"'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t"),t("span",{class:"token number"},"1"),c("\n\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"apple"'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"executes"),c(),t("span",{class:"token punctuation"},"{"),c(" \n\t\t\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Apples."'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t"),t("span",{class:"token number"},"1"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"pear"'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"executes"),c(),t("span",{class:"token punctuation"},"{"),c(" \n\t\t\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"Pears."'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t"),t("span",{class:"token number"},"1"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t"),t("span",{class:"token punctuation"},")"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br"),t("span",{class:"line-number"},"19"),t("br"),t("span",{class:"line-number"},"20"),t("br"),t("span",{class:"line-number"},"21"),t("br")])],-1),h=l('<p>This will have created a new command, <code>/test [apple/pear]</code> !</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>All <code>execute</code>/<code>runs</code> blocks are a Brigadier <code>CommandContext</code> ! As such, they should similarly return the number of successes that occurred.</p></div><h4 id="function-layout" tabindex="-1"><a class="header-anchor" href="#function-layout" aria-hidden="true">#</a> Function Layout</h4><p>Execution blocks can clutter up our command tree. We can extract these code blocks into functions to make our code more concise.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>dispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&quot;thing&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">this</span> runs <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&quot;other_thing&quot;</span><span class="token punctuation">)</span> runs <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fun</span> <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Command<span class="token operator">&lt;</span>ServerCommandSource<span class="token operator">&gt;</span> <span class="token punctuation">{</span> ctx <span class="token operator">-&gt;</span> \n\t<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Did foo!&quot;</span><span class="token punctuation">)</span>\n\t<span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="composite-execution" tabindex="-1"><a class="header-anchor" href="#composite-execution" aria-hidden="true">#</a> Composite Execution</h4><p>We can also call commands from other commands. To manually call a command from inside another command, run <code>command.run(context)</code>.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>dispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&quot;thing&quot;</span><span class="token punctuation">)</span> runs <span class="token punctuation">{</span>\n\t\t<span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token function">literal</span><span class="token punctuation">(</span><span class="token string">&quot;other_thing&quot;</span><span class="token punctuation">)</span> runs <span class="token function">doBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fun</span> <span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Command<span class="token operator">&lt;</span>ServerCommandSource<span class="token operator">&gt;</span> <span class="token punctuation">{</span> ctx <span class="token operator">-&gt;</span> \n\t<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Did foo!&quot;</span><span class="token punctuation">)</span>\n\t<span class="token number">1</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">fun</span> <span class="token function">doBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Command<span class="token operator">&lt;</span>ServerCommandSource<span class="token operator">&gt;</span> <span class="token punctuation">{</span> ctx <span class="token operator">-&gt;</span> \n\t<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Did bar!&quot;</span><span class="token punctuation">)</span>\n\t<span class="token function">doFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>\n\t<span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="literals" tabindex="-1"><a class="header-anchor" href="#literals" aria-hidden="true">#</a> Literals</h3><p>We can add literals to commands in several different ways, as shown below:</p>',10),v=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addCommand"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t"),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c(),t("span",{class:"token comment"},"/* ... */"),c(),t("span",{class:"token punctuation"},"}"),c("\n\n\t"),t("span",{class:"token comment"},"// shorthand"),c("\n\t"),t("span",{class:"token string"},'"another_test"'),c(),t("span",{class:"token punctuation"},"{"),c(),t("span",{class:"token comment"},"/* ... */"),c(),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br")])],-1),y=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"register"),t("span",{class:"token punctuation"},"("),c("\n\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"another_test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n"),t("span",{class:"token punctuation"},")"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br")])],-1),w=t("p",null,"The shorthand version is usually preferred, and will be used throughout the remaining examples.",-1),x=t("h3",{id:"arguments",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#arguments","aria-hidden":"true"},"#"),c(" Arguments")],-1),C=t("p",null,"We can create arguments for commands rather easily as well:",-1),q=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addCommand"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t"),t("span",{class:"token string"},'"count"'),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token function"},"argInt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"amt"'),t("span",{class:"token punctuation"},")"),c(" runs "),t("span",{class:"token punctuation"},"{"),c(" amt "),t("span",{class:"token operator"},"->"),c("\n\t\t\t"),t("span",{class:"token keyword"},"for"),c(),t("span",{class:"token punctuation"},"("),c("i "),t("span",{class:"token keyword"},"in"),c(),t("span",{class:"token number"},"0"),c(" until "),t("span",{class:"token function"},"amt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},[c('"Counting: '),t("span",{class:"token interpolation variable"},"$i"),c('"')]),t("span",{class:"token punctuation"},")"),c("\n\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br")])],-1),I=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"register"),t("span",{class:"token punctuation"},"("),c("\n\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"count"'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"argument"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"amt"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token function"},"integer"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"executes"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t\t\t\t\t\t"),t("span",{class:"token keyword"},"val"),c(" amt "),t("span",{class:"token operator"},"="),c(),t("span",{class:"token function"},"getInteger"),t("span",{class:"token punctuation"},"("),c("it"),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token string"},'"amt"'),t("span",{class:"token punctuation"},")"),c("\n\n\t\t\t\t\t\t\t"),t("span",{class:"token keyword"},"for"),c(),t("span",{class:"token punctuation"},"("),c("i "),t("span",{class:"token keyword"},"in"),c(),t("span",{class:"token number"},"0"),c(" until amt"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t\t\t\t\t\t\t"),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},[c('"Counting: '),t("span",{class:"token interpolation variable"},"$i"),c('"')]),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\n\t\t\t\t\t\t\t"),t("span",{class:"token number"},"1"),c("\n\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n"),t("span",{class:"token punctuation"},")"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br"),t("span",{class:"line-number"},"16"),t("br"),t("span",{class:"line-number"},"17"),t("br"),t("span",{class:"line-number"},"18"),t("br")])],-1),T=t("p",null,[c("This creates a new command, "),t("code",null,"/test count (amt)"),c(". It will print to the output "),t("code",null,"amt"),c(" number of times.")],-1),_=t("p",null,[c("As you can see, the lambda after the argument will always contain the argument expression. We can evaluate the argument inside of a command by invoking it (like "),t("code",null,"amt()"),c(" in the example above).")],-1),S=t("p",null,"Nesting of arguments can be done like so:",-1),E=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[t("span",{class:"token string"},'"add"'),c(),t("span",{class:"token punctuation"},"{"),c("\n    "),t("span",{class:"token function"},"argInt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"a"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c(" a "),t("span",{class:"token operator"},"->"),c("\n        "),t("span",{class:"token function"},"argInt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"b"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c(" b "),t("span",{class:"token operator"},"->"),c("\n            "),t("span",{class:"token keyword"},"this"),c(" runs "),t("span",{class:"token punctuation"},"{"),c("\n                "),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},[c('"Adding: '),t("span",{class:"token interpolation"},[t("span",{class:"token delimiter variable"},"${"),t("span",{class:"token function"},"a"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token operator"},"+"),c(),t("span",{class:"token function"},"b"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token delimiter variable"},"}")]),c('"')]),t("span",{class:"token punctuation"},")"),c("\n            "),t("span",{class:"token punctuation"},"}"),c("\n        "),t("span",{class:"token punctuation"},"}"),c("\n    "),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br")])],-1),L=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[t("span",{class:"token string"},'"add"'),c(),t("span",{class:"token punctuation"},"{"),c("\n    "),t("span",{class:"token function"},"argInt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"a"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c(" a "),t("span",{class:"token operator"},"->"),c("\n        "),t("span",{class:"token function"},"argInt"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"b"'),t("span",{class:"token punctuation"},")"),c(" runs "),t("span",{class:"token punctuation"},"{"),c(" b "),t("span",{class:"token operator"},"->"),c("\n            "),t("span",{class:"token function"},"println"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},[c('"Adding: '),t("span",{class:"token interpolation"},[t("span",{class:"token delimiter variable"},"${"),t("span",{class:"token function"},"a"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token operator"},"+"),c(),t("span",{class:"token function"},"b"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token delimiter variable"},"}")]),c('"')]),t("span",{class:"token punctuation"},")"),c("\n        "),t("span",{class:"token punctuation"},"}"),c("\n    "),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br")])],-1),R=l('<p>Built in arguments:</p><ul><li><code>argString</code>, <code>argInt</code>, <code>argFloat</code>, <code>argBool</code>, <code>argIdentifier</code>, <code>argBlockPos</code>, <code>argColor</code>, <code>argIntRange</code></li></ul><p>If you wish to use a different or nonstandard argument, there is always <code>argument&lt;T&gt;(type: ArgumentType&lt;T&gt;)</code> .</p><h3 id="suggestions" tabindex="-1"><a class="header-anchor" href="#suggestions" aria-hidden="true">#</a> Suggestions</h3><p>We can also provide suggestions for different arguments!</p><p>To do this, we can use <code>suggestionsList</code> to build a suggestions list.</p>',6),F=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addCommand"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"fruit"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t"),t("span",{class:"token string"},'"eat"'),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token keyword"},"val"),c(" fruitIdeas "),t("span",{class:"token operator"},"="),c(" suggestionList "),t("span",{class:"token punctuation"},"{"),c(),t("span",{class:"token function"},"listOf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"apple"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token string"},'"pear"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token string"},'"banana"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"}"),c("\n\n\t\t"),t("span",{class:"token function"},"argString"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"fruit"'),t("span",{class:"token punctuation"},","),c(" items "),t("span",{class:"token operator"},"="),c(" fruitIdeas"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t\t"),t("span",{class:"token comment"},"// ..."),c("\n\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br")])],-1),M=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[c("dispatcher"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"register"),t("span",{class:"token punctuation"},"("),c("\n\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"fruit"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"eat"'),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"then"),t("span",{class:"token punctuation"},"("),c("\n\t\t\t\t\tCommandManager"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"argument"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"fruit"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token function"},"string"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"suggests"),c(),t("span",{class:"token punctuation"},"{"),c(" context"),t("span",{class:"token punctuation"},","),c(" builder "),t("span",{class:"token operator"},"->"),c(" \n\t\t\t\t\t\t\t"),t("span",{class:"token function"},"listOf"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"apple"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token string"},'"pear"'),t("span",{class:"token punctuation"},","),c(),t("span",{class:"token string"},'"banana"'),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"forEach"),c(),t("span",{class:"token punctuation"},"{"),c(" \n\t\t\t\t\t\t\t\tbuilder"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"suggest"),t("span",{class:"token punctuation"},"("),c("it"),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t\t\t\t\t\tbuilder"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"buildFuture"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),c("\n\t\t\t\t\t\t"),t("span",{class:"token punctuation"},"}"),c("\n\t\t\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n"),t("span",{class:"token punctuation"},")"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br"),t("span",{class:"line-number"},"12"),t("br"),t("span",{class:"line-number"},"13"),t("br"),t("span",{class:"line-number"},"14"),t("br"),t("span",{class:"line-number"},"15"),t("br")])],-1),A=l('<p>If you want to provide tooltips, you can instead use <code>suggestionListTooltipped {}</code>.</p><h3 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements" aria-hidden="true">#</a> Requirements</h3><p>Some commands might have certain requirements in order to be run. For example, a player might need to have the right permissions. Requirements work identically to Brigadier:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>dispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;greet&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// only works when &quot;Joe&quot; is online</span>\n\t<span class="token string">&quot;joe&quot;</span> <span class="token punctuation">{</span>\n\t\trequires <span class="token punctuation">{</span> \n\t\t\t<span class="token string">&quot;Joe&quot;</span> <span class="token keyword">in</span> it<span class="token punctuation">.</span>playerNames\n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token keyword">this</span> runs <span class="token punctuation">{</span>\n\t\t\tit<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">sendFeedback</span><span class="token punctuation">(</span><span class="token function">LiteralText</span><span class="token punctuation">(</span><span class="token string">&quot;Hey Joe!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n\t\t\t<span class="token number">1</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>There are also shortcut functions for common requirements here:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>dispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token function">requiresCreative</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token comment">// OR</span>\n\t<span class="token function">requiresOp</span><span class="token punctuation">(</span>opLevel<span class="token punctuation">)</span>\n\t<span class="token comment">// OR</span>\n\t<span class="token function">requiresCreativeOrOp</span><span class="token punctuation">(</span>opLevel<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="clientside-commands" tabindex="-1"><a class="header-anchor" href="#clientside-commands" aria-hidden="true">#</a> Clientside Commands</h2><p>Fabric allows us to also specify client commands. We don&#39;t register these in a serverside callback, but instead inside of the mod initializer:</p>',8),B=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[t("span",{class:"token keyword"},"override"),c(),t("span",{class:"token keyword"},"fun"),c(),t("span",{class:"token function"},"onInitialize"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\n\t"),t("span",{class:"token comment"},"//... init code ..."),c("\n\n\tKambrik"),t("span",{class:"token punctuation"},"."),c("Command"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"addClientCommand"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\t"),t("span",{class:"token comment"},"// our command!"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br")])],-1),D=t("div",{class:"language-kotlin ext-kt line-numbers-mode"},[t("pre",{class:"language-kotlin"},[t("code",null,[t("span",{class:"token keyword"},"override"),c(),t("span",{class:"token keyword"},"fun"),c(),t("span",{class:"token function"},"onInitialize"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\n\t"),t("span",{class:"token comment"},"//... init code ..."),c("\n\n\t"),t("span",{class:"token keyword"},"if"),c(),t("span",{class:"token punctuation"},"("),c("FabricLoader"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"getInstance"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},"."),c("environmentType "),t("span",{class:"token operator"},"=="),c(" EnvType"),t("span",{class:"token punctuation"},"."),c("CLIENT"),t("span",{class:"token punctuation"},")"),c(),t("span",{class:"token punctuation"},"{"),c("\n\t\tClientCommandManager"),t("span",{class:"token punctuation"},"."),c("DISPATCHER"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"register"),t("span",{class:"token punctuation"},"("),c("\n\t\t\tLiteralArgumentBuilder"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"literal"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},'"test"'),t("span",{class:"token punctuation"},")"),c("\n\t\t"),t("span",{class:"token punctuation"},")"),c("\n\t"),t("span",{class:"token punctuation"},"}"),c("\n\n"),t("span",{class:"token punctuation"},"}"),c("\n")])]),t("div",{class:"line-numbers"},[t("span",{class:"line-number"},"1"),t("br"),t("span",{class:"line-number"},"2"),t("br"),t("span",{class:"line-number"},"3"),t("br"),t("span",{class:"line-number"},"4"),t("br"),t("span",{class:"line-number"},"5"),t("br"),t("span",{class:"line-number"},"6"),t("br"),t("span",{class:"line-number"},"7"),t("br"),t("span",{class:"line-number"},"8"),t("br"),t("span",{class:"line-number"},"9"),t("br"),t("span",{class:"line-number"},"10"),t("br"),t("span",{class:"line-number"},"11"),t("br")])],-1),K=l('<h2 id="command-examples" tabindex="-1"><a class="header-anchor" href="#command-examples" aria-hidden="true">#</a> Command Examples</h2><p>This section contains some examples that show how you might do some common tasks with the Command API.</p><details class="custom-container details"><summary>Examples</summary><p>This example lets you pick a registry, and prints all IDs in that registry to the log.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code>dispatcher<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token string">&quot;example&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token string">&quot;dump&quot;</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">val</span> dumpables <span class="token operator">=</span> suggestionList <span class="token punctuation">{</span> \n\t\t\tRegistry<span class="token punctuation">.</span>REGISTRIES<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>key<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> \n\t\t<span class="token punctuation">}</span>\n\t\t<span class="token function">argIdentifier</span><span class="token punctuation">(</span><span class="token string">&quot;dump_what&quot;</span><span class="token punctuation">,</span> items <span class="token operator">=</span> dumpables<span class="token punctuation">)</span> runs <span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">dump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> Command<span class="token operator">&lt;</span>ServerCommandSource<span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">val</span> what <span class="token operator">=</span> <span class="token function">getIdentifier</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token string">&quot;dump_what&quot;</span><span class="token punctuation">)</span>\n\n\t<span class="token keyword">if</span> <span class="token punctuation">(</span>Registry<span class="token punctuation">.</span>REGISTRIES<span class="token punctuation">.</span><span class="token function">containsId</span><span class="token punctuation">(</span>what<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">val</span> reg <span class="token operator">=</span> Registry<span class="token punctuation">.</span>REGISTRIES<span class="token punctuation">[</span>what<span class="token punctuation">]</span><span class="token operator">!!</span>\n\t\t<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contents of registry &#39;<span class="token interpolation variable">$what</span>&#39;:&quot;</span><span class="token punctuation">)</span>\n\t\treg<span class="token punctuation">.</span>ids<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> id <span class="token operator">-&gt;</span>\n\t\t\t<span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">}</span>\n\t\tit<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">sendFeedback</span><span class="token punctuation">(</span>\n\t\t\t<span class="token function">LiteralText</span><span class="token punctuation">(</span><span class="token string">&quot;Dumped contents of &#39;<span class="token interpolation variable">$what</span>&#39; to log.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n\t\t\t<span class="token boolean">false</span>\n\t\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\t\tit<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span>\n\t\t\t<span class="token function">LiteralText</span><span class="token punctuation">(</span><span class="token string">&quot;There is no registry with that name.&quot;</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></details>',3);u.render=function(c,l){const u=n("OutboundLink"),W=n("CodeGroupItem"),O=n("CodeGroup");return s(),a(o,null,[i,t("p",null,[r,t("a",k,[b,e(u)]),m]),d,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[g])),_:1}),e(W,{title:"Vanilla"},{default:p((()=>[f])),_:1})])),_:1}),h,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[v])),_:1}),e(W,{title:"Vanilla"},{default:p((()=>[y])),_:1})])),_:1}),w,x,C,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[q])),_:1}),e(W,{title:"Vanilla"},{default:p((()=>[I])),_:1})])),_:1}),T,_,S,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[E])),_:1}),e(W,{title:"Shorthand"},{default:p((()=>[L])),_:1})])),_:1}),R,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[F])),_:1}),e(W,{title:"Vanilla"},{default:p((()=>[M])),_:1})])),_:1}),A,e(O,null,{default:p((()=>[e(W,{title:"Kambrik"},{default:p((()=>[B])),_:1}),e(W,{title:"Vanilla"},{default:p((()=>[D])),_:1})])),_:1}),K],64)};export{u as default};

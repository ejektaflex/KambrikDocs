import{r as a,o as n,c as s,b as e,a as o,F as t,d as i,e as l}from"./app.6a3fb329.js";const p={},c=e("h1",{id:"serialization",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#serialization","aria-hidden":"true"},"#"),i(" Serialization")],-1),r=i("Kambrik ships with several different serializers, allowing us to save arbitrary pieces of data to JSON and load them back later. These serializers are all made with "),u={href:"https://github.com/Kotlin/kotlinx.serialization",target:"_blank",rel:"noopener noreferrer"},d=i("KotlinX Serialization"),k=i(", and "),b=e("em",null,"usage of this data serialization API assumes that you know the basics of KotlinX Serialization!",-1),m=l('<p>To access the basic Kambrik JSON format, use <code>Kambrik.Serial.Format</code>.</p><h2 id="serializing-data" tabindex="-1"><a class="header-anchor" href="#serializing-data" aria-hidden="true">#</a> Serializing Data</h2><p>Serializing data works just like regular KotlinX Serialization:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">FooData</span><span class="token punctuation">(</span><span class="token keyword">val</span> foo<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> <span class="token keyword">val</span> bar<span class="token operator">:</span> Int<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> Kambrik<span class="token punctuation">.</span>Serial<span class="token punctuation">.</span>Format<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>\n    FooData<span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FooData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span> <span class="token comment">//=&gt; {&quot;foo&quot;: false, &quot;bar&quot;: 5}</span>\n\n<span class="token keyword">val</span> fooBar <span class="token operator">=</span> Kambrik<span class="token punctuation">.</span>Serial<span class="token punctuation">.</span>Format<span class="token punctuation">.</span><span class="token function">decodeFromString</span><span class="token punctuation">(</span>\n    FooData<span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">data</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">println</span><span class="token punctuation">(</span>fooBar<span class="token punctuation">)</span> <span class="token comment">//=&gt; FooBar(foo=false, bar=5)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="custom-serializer-modules" tabindex="-1"><a class="header-anchor" href="#custom-serializer-modules" aria-hidden="true">#</a> Custom Serializer Modules</h3><p>Using a custom serializer module is as easy as:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">val</span> format <span class="token operator">=</span> Kambrik<span class="token punctuation">.</span>Serial<span class="token punctuation">.</span><span class="token function">formatFor</span><span class="token punctuation">(</span>our_custom_module<span class="token punctuation">)</span>\n\n<span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>\n    FooData<span class="token punctuation">.</span><span class="token function">serializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">FooData</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>If you want to access or extend Kambrik&#39;s serializer module, you can access it via <code>Kambrik.Serial.DefaultSerializers</code>.</p><h2 id="using-kambrik-s-serializers" tabindex="-1"><a class="header-anchor" href="#using-kambrik-s-serializers" aria-hidden="true">#</a> Using Kambrik&#39;s Serializers</h2><p>In order to serialize Vanilla data, we can add the annotation <code>@Contextual</code> to our type.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">FooData</span><span class="token punctuation">(</span><span class="token keyword">val</span> pos<span class="token operator">:</span> <span class="token annotation builtin">@Contextual</span> BlockPos<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>BlockPos</code>, as well as any other Vanilla classes, cannot be serialized/deserialized unless <code>@Contextual</code> has been added.</p><p>These are the following classes that can be serialized to JSON when marked as <code>@Contextual</code>:</p><ul><li><code>Block</code>*</li><li><code>BlockPos</code></li><li><code>Box</code></li><li><code>Identity</code></li><li><code>Item</code>*</li><li><code>NbtCompound</code></li></ul><p>* these classes are only referentially serialized.</p><h3 id="referential-serialization" tabindex="-1"><a class="header-anchor" href="#referential-serialization" aria-hidden="true">#</a> Referential Serialization</h3><p>Some Vanilla classes cannot be fully serialized, and are instead turned into a piece of related data. For example, serializing a <code>BucketItem</code> results in <code>minecraft:bucket</code>. Deserializing it does a lookup in the item registry and returns the original <code>BucketItem</code>. These are primarily used in the <a href="Message">Message API</a>. See <a href="Message#reference-serializers">the related documentation</a> for more information.</p>',17);p.render=function(i,l){const p=a("OutboundLink");return n(),s(t,null,[c,e("p",null,[r,e("a",u,[d,o(p)]),k,b]),m],64)};export{p as default};

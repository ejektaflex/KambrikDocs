import{r as n,o as a,c as s,b as t,a as e,F as o,e as p,d as r}from"./app.6a3fb329.js";const i={},l=p('<h1 id="auto-registration" tabindex="-1"><a class="header-anchor" href="#auto-registration" aria-hidden="true">#</a> Auto Registration</h1><p>Kambrik allows developers to defer registration until Kambrik registers content. Lets say you want to add an item, <code>NeatItem</code> to your game.</p><h2 id="registration" tabindex="-1"><a class="header-anchor" href="#registration" aria-hidden="true">#</a> Registration</h2><p>In order to do automatic registration, add a new entrypoint to your <code>fabric.mod.json</code> underneath your <code>main</code> entrypoint:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token comment">/* ... */</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token property">&quot;kambrik&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n        <span class="token property">&quot;adapter&quot;</span><span class="token operator">:</span> <span class="token string">&quot;kotlin&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my.neat.mod.MyModContent&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Now, registering the content is as simple as this:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">object</span> MyModContent <span class="token operator">:</span> KambrikAutoRegistrar <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> MY_NEAT_ITEM <span class="token operator">=</span> <span class="token string">&quot;neat_item&quot;</span> forItem <span class="token function">NeatItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Doing this will register your item as <code>your_mod_id:neat_item</code>. You can still refer to your created item, <code>MyModContent.MY_NEAT_ITEM</code>, whenever you&#39;d like.</p><h2 id="content-types" tabindex="-1"><a class="header-anchor" href="#content-types" aria-hidden="true">#</a> Content Types</h2><p>Using this method, you can add many common types of content. Examples:</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token keyword">object</span> MyModContent <span class="token operator">:</span> KambrikAutoRegistrar <span class="token punctuation">{</span>\n    <span class="token keyword">val</span> MY_NEAT_ITEM <span class="token operator">=</span> <span class="token string">&quot;neat_item&quot;</span> forItem <span class="token function">NeatItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> MY_POTION <span class="token operator">=</span> <span class="token string">&quot;my_potion&quot;</span> forPotion <span class="token function">NeatPotion</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">val</span> COOL_BLOCK <span class="token operator">=</span> <span class="token string">&quot;cool_block&quot;</span> forBlock <span class="token function">CoolBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',11),c=r("You can view the full list of registration methods "),u={href:"https://github.com/ejektaflex/Kambrik/blob/master/src/main/java/io/ejekta/kambrik/feature/registration/KambrikAutoRegistrar.kt",target:"_blank",rel:"noopener noreferrer"},k=r("on this page."),d=r("You can view a working example of auto registration "),m={href:"https://github.com/ejektaflex/Bountiful-Fabric/blob/master/src/main/java/io/ejekta/bountiful/content/BountifulContent.kt",target:"_blank",rel:"noopener noreferrer"},b=r("here.");i.render=function(p,r){const i=n("OutboundLink");return a(),s(o,null,[l,t("p",null,[c,t("a",u,[k,e(i)])]),t("p",null,[d,t("a",m,[b,e(i)])])],64)};export{i as default};

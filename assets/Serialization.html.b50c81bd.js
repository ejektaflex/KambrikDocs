import{r as n,o as a,c as s,b as t,a as e,F as p,d as o,e as l}from"./app.6a3fb329.js";const c={},i={id:"nbt-serialization-wip",tabindex:"-1"},r=t("a",{class:"header-anchor",href:"#nbt-serialization-wip","aria-hidden":"true"},"#",-1),u=o(" NBT Serialization (WIP) "),k=l('<p>Similarly to Kotlinx.Serialization&#39;s ability to turn Kotlin objects into JSON data and back, Kambrik allows us to turn Kotlin objects into NBT elements and back.</p><div class="language-kotlin ext-kt line-numbers-mode"><pre class="language-kotlin"><code><span class="token annotation builtin">@Serializable</span>\n<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">TestNpc</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> Int<span class="token punctuation">)</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token keyword">val</span> encoded <span class="token operator">=</span> NbtFormat<span class="token punctuation">.</span>Default<span class="token punctuation">.</span><span class="token function">encodeToTag</span><span class="token punctuation">(</span>\n    <span class="token function">TestNpc</span><span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n<span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span> <span class="token comment">//=&gt; {name:&quot;Bob&quot;,age:111}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',2);c.render=function(o,l){const c=n("Badge");return a(),s(p,null,[t("h1",i,[r,u,e(c,{text:"unstable",type:"warning"})]),k],64)};export{c as default};
